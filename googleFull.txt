#region full syntax 1
    #region word 1
        in
        not
        or
        for
        while
        return
    #endregion

    #region function 2
        #region calc
            def to_celsius(x):
               '''Convert Fahrenheit to Celsius'''
               return (x-32) * 5/9


            to_celsius(75)
        #endregion

        #region greeting

            def greeting(name):
                print("Welcome, " + name)
                
            greeting("Kay")
            greeting("Cameron")
        #endregion

        #region 2 params
            def greeting(name, department):
                print("Welcome, " + name)
                print("You are part of " + department)
                
            greeting("Blake", "Software engineering")
            greeting("Ellis", "Software engineering")
        #endregion

        #region calc sec
            def convert_seconds(seconds):
                hours = seconds // 3600
                minutes = (seconds - hours * 3600) // 60
                remaining_seconds = seconds - hours * 3600 - minutes * 60
                return hours, minutes, remaining_seconds
            
            hours, minutes, seconds = convert_seconds(5000)
            print(hours, minutes, seconds)
        #endregion

        #region func

            def convert_volume(fluid_ounce):
                ml = fluid_ounce * 29.5  
                return ml
            print("The volume in milliliters is " + str(convert_volume(2)))
            
            print("The volume in milliliters is " + str(convert_volume(2)*2))
            # print("The volume in milliliters is " + str(convert_volume(4))
        #endregion

        #region fact
            def fractional_part(numerator, denominator):
                # Operate with numerator and denominator to
                # keep just the fractional part of the quotient 
                if denominator == 0 or numerator == 0:
                    part = 0
                else:
                    part = (numerator % denominator) / denominator
                    return part

                print(fractional_part(5, 5)) # Should print 0
                print(fractional_part(5, 4)) # Should print 0.25
                print(fractional_part(5, 3)) # Should print 0.66...
                print(fractional_part(5, 2)) # Should print 0.5
                print(fractional_part(5, 0)) # Should print 0
                print(fractional_part(0, 5)) # Should print 0
        #endregion
    #endregion

    #region built in function 3
        print("Investigate failed login attempts during", month, "if more than", 100)
        print(type("This is a string"))
        string_representation = str(number)

        time_list = [12, 2, 32, 19, 57, 22, 14]
        print(sorted(time_list))

        time_list = [12, 2, 32, 19, 57, 22, 14]
        print(min(time_list))
        print(max(time_list))
    #endregion

    #region if/else 4
        number = -4


        if number > 0:
           print('Number is positive.')
        elif number == 0:
           print('Number is zero.')
        else:
           print('Number is negative.')

        def hint_username(username):
            if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long")
    #endregion

    #region print 5
        print("hello "+ "world")
        print(type("a"))
        print(type(2.5))
        print("The area of the triangle is: " + str(area)) 
    #endregion

    #region var 6
        captain: str = “Picard”
        a:int=1
    #endregion

    #region bool 7
        print(10>1) #true
        print("cat" == "dog") #false
        print (1 != 2) #true
        

        print(5+10 == 6+7)  # If the two values are not equal, as in the
        print((6*3 >= 18) and (9+9 <= 36/2))

        print((15/3 < 2+4) or (0 >= 6-7))  # True or True = True

        print(not today == "Tuesday")   
    #endregion

    #region loops 8
        #region while loops
            x = 0
            while x < 5:
                print("Not there yet, x=" + str(x))
                x = x + 1
            print("x=" + str(x))
            x=5 

            def attempts(n):
                x = 1
                while x <= n:
                    print("Attempt " + str(x))
                    x += 1
                print("Done")
            attempts(5)
        #endregion

        #region while compare
            x = 1
            sum = 0
            while x < 10:
                sum = sum + x
                x = x + 1

            product = 1
            while x < 10:
                product = product * x
                x = x + 1

            print(sum, product)
            #Ouput 45 1
        #endregion

        #region while group
            while factor < given_number:
                if given_number % factor == 0:
                    count += 1
                factor += 1
            return count

            print(count_factors(0)) # Count value should be 0
            print(count_factors(3)) # Should count 2 factors (1x3)
            print(count_factors(10)) # Should count 4 factors (1x10, 2x5)
            print(count_factors(24)) # Should count 8 factors (1x24, 2x12, 3x8, and 4x6). 
        #endregion

        #region for loop
            #region in range 
                for x in range(5):
                    print(x)
            #endregion

            #region for array
                values = [ 23, 52, 59, 37, 48 ]
                sum = 0
                length = 0
                for value in values:
                    sum += value
                    length += 1

                print("Total sum: " + str(sum) + " - Average: " + str(sum/length))
            #endregion

            #region for string
                #region 1

                    for i in range(len(greeting)): # 0 1 2 3 4 
                        print(i) 
                #endregion

                #region 2
                    greeting = 'Hello'
                    index = 0
                    while index < len(greeting):
                        print(greeting[index])
                        index += 1
                #endregion

                #region 3
                    greeting = 'Hello'
                    index = 0
                    while index < len(greeting):
                        print(greeting[index:index+1])
                        index += 1
                #endregion

                #region 4
                    numbers = [1, 2, 3, 4, 5]
                    squared_numbers = [x ** 2 for x in numbers]
                    print(squared_numbers)
                #endregion

                #region 5

                #endregion
            #endregion

            #region def for loop
                def greet_friends(friends):
                    for friend in friends:
                        print("Hi " + friend)

                greet_friends(['Taylor', 'Luisa', 'Jamaal', 'Eli'])
            #endregion
        #endregion

        #region for repeated 
            # This loop iterates on the value of the "number" variable in a range
            # of 1 to 6+1 (the upper range limit of 6 is excluded, so +1 has
            # been added to it to include 6 in the range). The incremental value
            # for the loop is 2 (number+2). The print() function will output the
            # resulting value of "number" multiplied by 3.

            for number in range(1, 6+1, 2):
                print(number * 3)

            # The loop should print 3, 9, 15
        #endregion

        #region in range(2,8,4)
            # This loop iterates on the value of the "number" variable in a range
            # of 2 to 7 (the upper range limit of 8 is excluded). The print() 
            # function will output the resulting value of "number" squared.

            for number in range(2,8):
                print(number**2)

            # The loop should print 4, 9, 16, 25, 36, 49
        #endregion

        #region nested for loop from latest to first loop 
            for x in range(2):
                print("This is the outer loop iteration number " + str(x))
                for y in range(3+1):
                    print("Inner loop iteration number " + str(y))
                print("Exit inner loop")

This is the outer loop iteration number 0
Inner loop iteration number 0
Inner loop iteration number 1
Inner loop iteration number 2
Inner loop iteration number 3
Exit inner loop
This is the outer loop iteration number 1
Inner loop iteration number 0
Inner loop iteration number 1
Inner loop iteration number 2
Inner loop iteration number 3
Exit inner loop
        #endregion
    #endregion  

    #region string 9
        #region slice
            string1 = "Greetings, Earthlings"
            print(string1[0])   # Prints “G”
            print(string1[4:8]) # Prints “ting”
            print(string1[11:]) # Prints “Earthlings”
            print(string1[:5])  # Prints “Greet”
        #endregion

        #region slice -1 | after end |
            print(string1[-10:])     # Prints “Earthlings” again
            print(string1[55:])     # Prints “” 
            print(string1[0::2])    # Prints “Getns atlns” reverse every 2 char
            print(string1[::-1])    # Prints “sgnilhtraE ,sgniteerG” reverse every char
            # The next 3 digits are the line number:
              line = phonenum[-4:]
        #endregion

        #region concat
            greetings = ["Hello", "world"]
            print(" ".join(greetings))  # Prints "Hello world"
            You can also concatenate a combination of strings and variables like in the following example.
            name = "Alice"
            print("Hello, " + name + "!")  # Prints "Hello, Alice!"
        #endregion

        #region def concat 
            def format_phone(phonenum):
                area_code = "(" + phonenum[:3] + ")"
                exchange = phonenum[3:6]
                line = phonenum[-4:]
                return area_code + " " + exchange + "-" + line

            print(format_phone("2025551212")) # Outputs: (202) 555-1212
        #endregion

    #endregion
#endregion