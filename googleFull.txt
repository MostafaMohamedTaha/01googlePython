#region full syntax 1
    #region word
        in
        not
        or
        for
        while
        return
    #endregion

    #region function
        #region calc
            def to_celsius(x):
               '''Convert Fahrenheit to Celsius'''
               return (x-32) * 5/9


            to_celsius(75)
        #endregion

        #region greeting

            def greeting(name):
                print("Welcome, " + name)
                
            greeting("Kay")
            greeting("Cameron")
        #endregion

        #region 2 params
            def greeting(name, department):
                print("Welcome, " + name)
                print("You are part of " + department)
                
            greeting("Blake", "Software engineering")
            greeting("Ellis", "Software engineering")
        #endregion

        #region calc sec
            def convert_seconds(seconds):
                hours = seconds // 3600
                minutes = (seconds - hours * 3600) // 60
                remaining_seconds = seconds - hours * 3600 - minutes * 60
                return hours, minutes, remaining_seconds
            
            hours, minutes, seconds = convert_seconds(5000)
            print(hours, minutes, seconds)
        #endregion

        #region func

            def convert_volume(fluid_ounce):
                ml = fluid_ounce * 29.5  
                return ml
            print("The volume in milliliters is " + str(convert_volume(2)))
            
            print("The volume in milliliters is " + str(convert_volume(2)*2))
            # print("The volume in milliliters is " + str(convert_volume(4))
        #endregion

        #region fact
            def fractional_part(numerator, denominator):
                # Operate with numerator and denominator to
                # keep just the fractional part of the quotient 
                if denominator == 0 or numerator == 0:
                    part = 0
                else:
                    part = (numerator % denominator) / denominator
                    return part

                print(fractional_part(5, 5)) # Should print 0
                print(fractional_part(5, 4)) # Should print 0.25
                print(fractional_part(5, 3)) # Should print 0.66...
                print(fractional_part(5, 2)) # Should print 0.5
                print(fractional_part(5, 0)) # Should print 0
                print(fractional_part(0, 5)) # Should print 0
        #endregion
    #endregion

    #region built in function
        print("Investigate failed login attempts during", month, "if more than", 100)
        print(type("This is a string"))
        string_representation = str(number)

        time_list = [12, 2, 32, 19, 57, 22, 14]
        print(sorted(time_list))

        time_list = [12, 2, 32, 19, 57, 22, 14]
        print(min(time_list))
        print(max(time_list))
    #endregion

    #region if/else
        number = -4


        if number > 0:
           print('Number is positive.')
        elif number == 0:
           print('Number is zero.')
        else:
           print('Number is negative.')

        def hint_username(username):
            if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long")
    #endregion

    #region print
        print("hello "+ "world")
        print(type("a"))
        print(type(2.5))
        print("The area of the triangle is: " + str(area)) 
    #endregion

    #region var
        captain: str = “Picard”
        a:int=1
    #endregion

    #region bool
        print(10>1) #true
        print("cat" == "dog") #false
        print (1 != 2) #true
        

        print(5+10 == 6+7)  # If the two values are not equal, as in the
        print((6*3 >= 18) and (9+9 <= 36/2))

        print((15/3 < 2+4) or (0 >= 6-7))  # True or True = True

        print(not today == "Tuesday")   
    #endregion

    #region loops
        #region while loops
            x = 0
            while x < 5:
                print("Not there yet, x=" + str(x))
                x = x + 1
            print("x=" + str(x))
            x=5 

            def attempts(n):
                x = 1
                while x <= n:
                    print("Attempt " + str(x))
                    x += 1
                print("Done")
            attempts(5)
        #endregion

        #region while compare
            x = 1
            sum = 0
            while x < 10:
                sum = sum + x
                x = x + 1

            product = 1
            while x < 10:
                product = product * x
                x = x + 1

            print(sum, product)
            #Ouput 45 1
        #endregion

        #region while group
            while factor < given_number:
                if given_number % factor == 0:
                    count += 1
                factor += 1
            return count

            print(count_factors(0)) # Count value should be 0
            print(count_factors(3)) # Should count 2 factors (1x3)
            print(count_factors(10)) # Should count 4 factors (1x10, 2x5)
            print(count_factors(24)) # Should count 8 factors (1x24, 2x12, 3x8, and 4x6). 
        #endregion
    #endregion
#endregion